#version 330 core

out vec4 Color;

struct Material {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
}; 

uniform Material material;

struct Light{
   vec3 position;

   vec3 ambient;
   vec3 diffuse;
   vec3 specular;
};

uniform Light light;

uniform vec3 cameraPos;
uniform vec3 LightColor;

in vec3 Normal;
in vec3 FragPos;

void main()
{
   vec3 ambient = LightColor * light.ambient * material.ambient;

   vec3 norm = normalize(Normal);
   vec3 LightDir = normalize(light.position - FragPos);
   float diff = max((dot(norm, LightDir)), 0.0f);

   vec3 diffuse = diff * material.diffuse * LightColor * light.diffuse;

   vec3 viewDir = normalize(cameraPos - FragPos);
   vec3 reflectDir = reflect(-LightDir, norm);
   float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);

   vec3 specular = material.specular * spec * LightColor * light.specular;

   vec3 result = ambient + diffuse + specular;
   Color = vec4(result, 1.0f);
 
}