#version 330 core

out vec4 FragColor;

struct Material {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
}; 

uniform Material material;

struct SpotLight {
    vec3 position;
    vec3 direction;     
    float cutOff;     
    float outerCutOff;  

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;

    float constant;
    float linear;
    float quadratic;
};

uniform SpotLight light;
uniform vec3 cameraPos;
uniform sampler2D Texture;

in vec3 Normal;
in vec3 FragPos;
in vec2 TexCoord;

void main()
{
   vec3 texColor = texture(Texture, TexCoord).rgb;
   vec3 lightDir = normalize(light.position - FragPos);

   float theta = dot(lightDir, normalize(-light.direction)); 
   float epsilon = light.cutOff - light.outerCutOff;
   float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);

   float distance = length(light.position - FragPos);
   float attenuation = 1.0 / (light.constant + light.linear * distance + 
                              light.quadratic * (distance * distance));

   vec3 ambient = light.ambient * texColor;

   vec3 norm = normalize(Normal);
   vec3 viewDir = normalize(cameraPos - FragPos);  

   float diff = max(dot(norm, lightDir), 0.0);
   vec3 diffuse = light.diffuse * diff * texColor;  

   vec3 reflectDir = reflect(-lightDir, norm);
   float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
   vec3 specular = light.specular * spec * texColor;     

   diffuse *= intensity * attenuation;
   specular *= intensity * attenuation;
   ambient *= attenuation;
    
   vec3 result = ambient + diffuse + specular;
   FragColor = vec4(result, 1.0);                  
}
