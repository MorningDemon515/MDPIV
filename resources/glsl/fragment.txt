#version 330 core

struct Materials
{
    vec3 Diffuse;
    vec3 Ambient;
    vec3 Specular;

    float Power;
};

struct Materials_Texture
{
    vec3 Specular;

    float Power;
};

struct Light_Point
{
    vec3 Position;

    vec3 Ambient;
    vec3 Diffuse;
    vec3 Specular;

    float Constant;
    float Linear;
    float Quadratic;
};

struct Light_Directional
{
    vec3 Direction;

    vec3 Ambient;
    vec3 Diffuse;
    vec3 Specular;
};

struct Light_Spot
{
    vec3 Position;
    vec3 Direction;
    float cutOff;
    float outerCutOff;

    vec3 Ambient;
    vec3 Diffuse;
    vec3 Specular;

    float Constant;
    float Linear;
    float Quadratic;
};

out vec4 FragColor;

uniform vec3 ViewPos;

in vec3 Normal;
in vec3 FragPos;
in vec2 TexCoords;

uniform Materials_Texture materials;

uniform sampler2D Texture;

#define LIGHT_NUM 4

uniform Light_Point light_point[LIGHT_NUM];
uniform Light_Directional light_dir;
uniform Light_Spot light_spot;

vec3 DirLight(Light_Directional light, vec3 normal, vec3 viewDir);
vec3 PointLight(Light_Point light, vec3 normal, vec3 viewDir, vec3 fragPos);
vec3 SpotLight(Light_Spot light, vec3 normal, vec3 viewDir, vec3 fragPos);

vec3 ObjectColor = texture(Texture, TexCoords).rgb;

void main()
{
    /*
    vec3 norm = normalize(Normal);
    vec3 ViewDir = normalize(ViewPos - FragPos);
    
    vec3 result = vec3(0.0f, 0.0f, 0.0f);

    for(int i = 0; i < LIGHT_NUM; i++)
    {
      result += PointLight(light_point[i], norm , ViewDir, FragPos);     
    }                   

    result += SpotLight(light_spot, norm, ViewDir, FragPos);          

    FragColor = vec4(result, 1.0);
    */

    FragColor = vec4(1.0f, 0.0f, 0.0f, 1.0f);
}

vec3 DirLight(Light_Directional light, vec3 normal, vec3 viewDir)
{
    vec3 ambient = light.Ambient * ObjectColor;

    vec3 LightDir = normalize(-light.Direction);

    float diff = max(dot(normal, LightDir), 0.0);
    vec3 diffuse = light.Diffuse * diff * ObjectColor;

    vec3 ReflectDir = reflect(-LightDir, normal);

    float spec = pow(max(dot(viewDir, ReflectDir), 0.0), materials.Power);
    vec3 specular = light.Specular * spec * materials.Specular;

    return (ambient + diffuse + specular);
}

vec3 PointLight(Light_Point light, vec3 normal, vec3 viewDir, vec3 fragPos)
{
    vec3 ambient = light.Ambient * ObjectColor;

    vec3 LightDir = normalize(light.Position - fragPos);
    float diff = max(dot(normal, LightDir),0.0);
    vec3 diffuse = light.Diffuse * diff * ObjectColor;

    vec3 ReflectDir = reflect(-LightDir, normal);
    float spec = pow(max(dot(viewDir, ReflectDir), 0.0), materials.Power);
    vec3 specular = light.Specular * (spec * materials.Specular);

     float distance    = length(light.Position - fragPos);
      float attenuation = 1.0 / (light.Constant + light.Linear * distance + 
                light.Quadratic * (distance * distance));

      ambient  *= attenuation; 
      diffuse  *= attenuation;
      specular *= attenuation;    

      return (ambient + diffuse + specular);
}

vec3 SpotLight(Light_Spot light, vec3 normal, vec3 viewDir, vec3 fragPos)
{
    vec3 LightDir = normalize(light.Position - fragPos);

    float theta = dot(LightDir, normalize(-light.Direction));
    float epsilon = light.cutOff - light.outerCutOff;
    float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);

    vec3 ambient = light.Ambient * ObjectColor;

    float diff = max(dot(normal, LightDir), 0.0);
    vec3 diffuse = light.Diffuse * diff * ObjectColor;

    vec3 ReflectDir = reflect(-LightDir, normal);
    float spec = pow(max(dot(viewDir, ReflectDir), 0.0), materials.Power);
    vec3 specular = light.Specular * (spec * materials.Specular);

    float distance = length(light.Position - fragPos);
    float attenuation = 1.0 / (light.Constant + light.Linear * distance + 
                             light.Quadratic * (distance * distance));

    diffuse *= intensity;
    specular *= intensity;

    ambient *= attenuation;
    diffuse *= attenuation;
    specular *= attenuation;

    return (ambient + diffuse + specular);   
}

