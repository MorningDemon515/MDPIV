#version 330 core

out vec4 FragColor;

uniform vec3 ViewPos;

in vec3 Normal;
in vec3 FragPos;
in vec2 TexCoords;

struct Materials
{
    vec3 Diffuse;
    vec3 Ambient;
    vec3 Specular;

    float Power;
};

struct Materials_Texture
{
    vec3 Specular;

    float Power;
};

uniform Materials_Texture materials;

uniform sampler2D Texture;

struct Light_Point
{
    vec3 Position;

    vec3 Ambient;
    vec3 Diffuse;
    vec3 Specular;

    float Constant;
    float Linear;
    float Quadratic;
};

struct Light_Directional
{
    vec3 Direction;

    vec3 Ambient;
    vec3 Diffuse;
    vec3 Specular;
};

uniform Light_Point light;

void main()
{
      // Ambient 
      vec3 ambient = light.Ambient * vec3(texture(Texture, TexCoords));

      // Normal And Light Direction
      vec3 norm = normalize(Normal);
      //vec3 LightDir = normalize(-light.Direction);
      vec3 LightDir = normalize(light.Position - FragPos);
 
      // Attenuation
      float distance    = length(light.Position - FragPos);
      float attenuation = 1.0 / (light.Constant + light.Linear * distance + 
                light.Quadratic * (distance * distance));

      // Diffuse and Specular
      float diff = max(dot(norm , LightDir), 0.0);
      vec3 diffuse = light.Diffuse * (diff * vec3(texture(Texture, TexCoords)));

      vec3 ViewDir = normalize(ViewPos - FragPos);
      vec3 ReflectDir = reflect(-LightDir, norm);

      float spec = pow(max(dot(ViewDir, ReflectDir), 0.0), materials.Power);
      vec3 specular = light.Specular * (spec * materials.Specular);
      
      ambient  *= attenuation; 
      diffuse  *= attenuation;
      specular *= attenuation;

      vec3 result = ambient + diffuse + specular;
      FragColor = vec4(result, 1.0f);
}


/*
void main()
{
      vec3 ambient = light.Ambient * vec3(texture(Texture, TexCoords));

      vec3 norm = normalize(Normal);
      vec3 LightDir = normalize(light.Position - FragPos);

      float diff = max(dot(norm , LightDir), 0.0);
      vec3 diffuse = light.Diffuse * (diff * vec3(texture(Texture, TexCoords)));

      vec3 ViewDir = normalize(ViewPos - FragPos);
      vec3 ReflectDir = reflect(-LightDir, norm);

      float spec = pow(max(dot(ViewDir, ReflectDir), 0.0), materials.Power);
      vec3 specular = light.Specular * (spec * materials.Specular);

      vec3 result = ambient + diffuse + specular;
      FragColor = vec4(result, 1.0f);
}
*/